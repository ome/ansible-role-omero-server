---
# Install 5.2 on both omero-server-olddep and omero-server-newdep
- hosts: all

  pre_tasks:
    # To test the upgrade process without breaking the idempotence check
    # we need to add a flag so the first omero-server installation is
    # only run once, otherwise during the second run ansible will attempt
    # to downgrade a server to 5.2 which will fail due to the lack of a
    # database downgrade script
    - name: check whether omero-server has been installed at least once
      stat:
        path: /opt/omero/server/OMERO.server
      register: molecule_test_omero_server_installed_1

  roles:

    - role: openmicroscopy.postgresql
      postgresql_install_server: True
      postgresql_databases:
        - name: omero
      postgresql_users:
        - user: omero
          password: omero
          databases: [omero]

    - role: ansible-role-omero-server
      omero_server_system_managedrepo_group: importer
      omero_server_system_umask: "0002"
      omero_server_config_set:
        Ice.IPv6: "0"
        omero.client.ui.tree.type_order:
          - screen
          - plate
          - project
          - dataset
      # This should override host_vars
      omero_server_release: "5.2"
      when: not molecule_test_omero_server_installed_1.stat.exists

  tasks:
    - name: additional config file
      copy:
        content: >
          config set omero.policy.binary_access -- "-read,-write,-image,-plate"
        dest: /opt/omero/server/config/molecule-additional-config.omero
      notify:
      - restart omero-server


# Attempt to upgrade
# omero_server_release is defined in molecule.yml host_vars so:
# - omero-server-newdep: latest: upgraded
# - omero-server-olddep: present: unchanged at 5.2
- hosts: all
  roles:

    - role: ansible-role-omero-server
      omero_server_system_managedrepo_group: importer
      omero_server_system_umask: "0002"
      omero_server_config_set:
        Ice.IPv6: "0"
        omero.client.ui.tree.type_order:
          - screen
          - plate
          - project
          - dataset


# Additional tasks for setting up tests
- hosts: all
  tasks:

  - name: create import user
    user:
      name: data-importer
      group: importer

  - name: create data directory
    file:
      path: /data/import
      state: directory

  - name: create fake image
    copy:
      content: ''
      dest: /data/import/test.fake

# testinfra Sudo doesn't use the `-i` flag, so the working directory needs
# to be accessible
- hosts: vagrant-hosts
  tasks:
  - name: make vagrant home accessible
    file:
      owner: vagrant
      group: vagrant
      mode: "0711"
      path: /home/vagrant
      state: directory
